一、 TCP/IP Socket
     TCP协议是面向连接的、保证高可靠性的传输协议，IP协议是无连接、不可靠的网络协议
     1.常规应用的四层网络分层：应用层、传输层、网络层、链路层
     2.Socket是在应用层和传输层之间的一个抽象层，封装了传输层的复杂操作提供简单易用的API给应用层使用
     3.TCP 连接的三次握手，客户端向服务端发送一个syn包（syn=j），服务端收到syn包并确认（ack=j+1），同时向客户端发送一个syn包（syn=k），
     客户端收到服务端的确认包和同步包，客户端再向服务端发一个确认包（ack=k+1），完成三次握手
     4.TCP 断开四次挥手，客户端会先发一个FIN包通知服务端请求关闭连接，服务端会发一个确认ack包给客户端，当服务端运行一段时间后会发一个FIN包给客户端请求断开连接，
     客户端收到服务端请求之后会发一个确认ack包给服务端，表示收到服务端请求
     5.TCP 可靠性的保证是采用“带重传的肯定确认的”技术，结合滑动窗口技术以提高网络吞吐量
     6.TCP 粘包、拆包原因
        - Socket 缓冲区和滑动窗口：每个socket在内核中都有一个发送缓冲区和接收缓冲区
        - MSS/MTU 限制：MSS（TCP报文中data部分的最大长度）、MTU（链路层一次发送 最大数据限制）
        - Nagle 算法
     7.TCP 粘包、拆包问题解决：可以通过定义应用的协议(protocol)来解决，协议的作用就定义传输数据的格式。

二、NIO
     NIO 非阻塞IO，一种基于通道和缓冲区的IO方式。NIO 有三大核心组件，Channel（通道）、Buffer（缓冲区）、Selector（选择器）。
     数据总是从通道读取到缓冲区或者是从缓冲区写入通道，Selector用来监听多个通道的事件，因此单个线程可以监听多个数据通道。
     一个通道创建之后在Selector上注册感兴趣的事件，通过调用Selector的select方法返回一个准备就绪的SelectionKey集合，SelectionKey中包含
     对这个事件感兴趣的Channel。

三、Netty
    Netty是一个高性能、异步事件驱动的NIO网络框架，具有高并发、传输快、封装好等特点。
    1. Netty的Reactor线程模型：mainReactor负责处理客户端的连接请求，并将accept的连接注册到subReactor中的一个线程中；subReactor负责处理
    客户端通道上的数据读写；ThreadPool 负责处理具体的业务逻辑。
    2.Netty服务启动之前调用group、channel，handler、option、attr、childHandler、childOption、childAttr设置启动参数
    3.Netty通过编写多个ChannelHandler 来处理不同的功能，通过ChannelPipeline来保证ChannelHandler的处理顺序。每个Channel创建的时候都会关联一个ChannelPipeline，
    ChannelHandler通过封装成ChannelHandlerContext链表结构添加到ChannelPipeline中以此来保证ChannelHandler的执行顺序。
    4.调用顺序：先是调用ChannelPipeline中的fire***方法，接着是ChannelHandlerContext中的fire***方法，最后是ChannelHandler中的***方法

四、Tomcat
    1.Tomcat的最顶层是一个Server，代表着整个服务，控制着整个tomcat的生命周期，一个Server包含至少一个Service，用于提供具体的服务。
    2.Service主要包含两个部分，Connector和Container，Connector负责处理网络连接相关的事情，并提供Socket和Request和Response的转换，
    Container负责封装和管理Servlet，以及处理Request请求，一个Service只有一个Container，但是可以有多个Connector，这是因为一个服务可以处理多个连接
    3.Connector使用ProtocolHandler来处理网络请求的，包含三个部件，EndPoint、Processor、Adapter，Endpoint用来处理底层的Socket网络连接，实现的是TCP/IP协议；
    Processor用于将连接接收到的socket封装成Request，实现的是Http协议；Adapter用于将Request交给Container具体处理。
    4.EndPoint中有两个内部类，Acceptor和Poller，Acceptor主要负责监听网络连接且进行任务分发的后台线程，Acceptor接收网络请求然后将socket交给Poller，Poller负责
    执行数据的读取和业务处理。

五、JVM与多线程
    1.Java内存区域：程序计数器、虚拟机栈、本地方法栈、Java堆、方法区
    2.Java内存模型：这是一个抽象的概念，规范定义程序中变量的访问方式。每个线程创建的时候都会为其创建一个工作内存，用于存储线程私有的数据，
    而Java内存模型规定所有的变量都必须存储在主内存中，主内存属于共享区域，所有线程都可以访问，但是线程对变量的操作必须在工作内存中进行。所以，
    当线程要对共享变量操作是先要将主内存中的变量拷贝到工作内存，操作完之后再拷贝到主内存。
    3.一般程序中由happen-before保证程序语义的有序性，volatile保证共享变量对所有线程可见，禁止指令重排优化
    4.创建对象：检查这个类是否被加载，加载类，为对象分配内存，初始化对象内存空间，设置对象头（类的元数据信息、对象哈希码、GC分代年龄等），调用init方法初始化对象
    5.对象内存布局：对象头、实例数据、对齐填充，对象头中存放类元数据信息、哈希码、GC分代年龄、所标志信息等
    6.可达性分析算法：从节点开始搜索，是否有GC Roots与之相连，可作为GC Root的对象
        - 虚拟机栈中引用的对象
        - 本地方法栈中引用的对象
        - 方法区中类静态属性引用的对象
        - 方法区中常量引用的对象
    7.垃圾收集算法：标记-整理算法、复制算法、分代收集算法
    8.堆内存分代：年轻代（Eden、Survivor）、老年代、永久代，Minor GC、Full GC，每块区域满了都会触发Minor GC，Old、Perm满了会触发Full GC
    9.创建线程的方式：继承Thread、实现Runnable、由线程池创建，线程包含几种状态：创建(new)、就绪(runnable)、运行(running)、阻塞(blocked)、等待（time waiting、waiting）、消亡（dead）
    10.同步互斥锁：synchronized三种使用方式，修饰实例方法，对当前实例加锁；修饰静态方法，对当前Class对象加锁；修饰代码块，对指定对象加锁。通过javap可查看字节码，修饰方法通过
    字节码中的flag（ACC_SYNCHRONIZED）设置加锁，修饰块通过在代码块前后加monitorenter 和monitorexit 指令。
    synchronized加锁，每个对象都有一个monitor对象与之关联，monitor中有两个队列，一个同步队列一个等待队列，当多个线程同时访问一段代码时，没有获取到锁的线程会进入到同步队列，
    当线程调用了wait方法时，会释放调锁，然后进入等待队列，
    JVM对synchronized的优化：偏向锁、轻量级锁、自旋锁、锁消除
    11.JUC并发包：ReentrantLock、Condition、Semaphore、CountDownLatch 、CyclicBarrier、LockSupport 、UnSafe
    12.CAS（比较交换）和AQS（队列同步器）：


